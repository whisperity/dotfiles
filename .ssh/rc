#!/bin/sh
# Sadly it seems this script is always run in SH, as in
#     /bin/bash -c '/bin/sh .ssh/rc'
# so we have to be careful as to what features are used...

#  If the file ~/.ssh/rc exists, sh(1) runs it after reading the environment
# files but before starting the user's shell or command.  It must not pro‐
# duce any output on stdout; stderr must be used instead.  If X11 forward‐
# ing is in use, it will receive the "proto cookie" pair in its standard
# input (and DISPLAY in its environment).  The script must call xauth(1)
# because sshd will not run xauth automatically to add X11 cookies.
if read proto cookie && [ -n "$DISPLAY" ]; then
  if [ `echo $DISPLAY | cut -c1-10` = 'localhost:' ]; then
    # X11UseLocalhost=yes
    echo add unix:`echo $DISPLAY |
      cut -c11-` $proto $cookie
  else
    # X11UseLocalhost=no
    echo add $DISPLAY $proto $cookie
  fi | xauth -q -
fi

if [ -z "$SSH_TTY" ]; then
  # Don't do anything, we are not interactive.
  exit
fi

write_rcprofile() {
  # We cannot directly interface with the shell's vars, so we rely on the
  # shell RC files, e.g. `.profile`, to evaluate us.
  local RCPROFILE=$HOME/.ssh/.ephemeral-rcprofile

  echo "export SSH_AGENT_PID=$SSH_AGENT_PID;" >> $RCPROFILE
  echo "export SSH_AUTH_SOCK=$SSH_AUTH_SOCK;" >> $RCPROFILE
  echo "echo \"ssh::emphemeral-rcprofile: setting current shell" \
       "to use agent $SSH_AGENT_PID.\"" >> $RCPROFILE
}

test_agent() {
  ssh-add -L >/dev/null 2>&1
  if [ $? -eq 2 ]; then
    return 1
  else
    return 0
  fi
}

remove_agentpid() {
  echo "sshrc: Stale SSH Agent PID-file $AGENTPID, removing..." >&2
  rm $1
}

check_agent() {
  for AGENTFILE in $(echo "$XDG_RUNTIME_DIR/ssh-"* 2>/dev/null)
  do
    if (echo "$AGENTFILE" | grep "ssh-\*"); then
      break
    fi

    local AGENTPID=$(echo $AGENTFILE | cut -d "-" -f 2)
    if [ -L $AGENTFILE -a -S $AGENTFILE ]; then
      export SSH_AGENT_PID=$AGENTPID
      export SSH_AUTH_SOCK=$(readlink -f $AGENTFILE)

      test_agent
      if [ $? -eq 0 ]; then
        return 0
      else
        remove_agentpid $AGENTFILE
      fi
    else
      remove_agentpid $AGENTFILE
    fi
  done

  return 1
}

make_agent() {
  echo "sshrc: Spawning new SSH Agent..." >&2
  eval $(ssh-agent -t 1440 -s) >/dev/null
  ln -s "$SSH_AUTH_SOCK" "$XDG_RUNTIME_DIR/ssh-$SSH_AGENT_PID"
}

if [ -z "$SSH_AUTH_SOCK" ]; then
  check_agent
  if [ $? -ne 0 ];
  then
    make_agent
  fi
  write_rcprofile
else
  echo "sshrc: No-op. Using the forwarded Agent." >&2
fi
